name: Build and Release Android APK

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read
  security-events: write

jobs:
  analyze:
    name: Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Flutter 3.24.0
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Verify the installation
      run: flutter doctor -v
      
    - name: Run Flutter analyzer
      run: flutter analyze --no-fatal-infos
      continue-on-error: true
      
    - name: Run tests
      run: flutter test --coverage --reporter=expanded
      continue-on-error: true

  build:
    name: Build APK
    runs-on: ubuntu-latest
    needs: analyze
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Flutter 3.24.0
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
        
    - name: Get dependencies with retry
      run: |
        for i in {1..3}; do
          echo "Attempt $i: Getting dependencies..."
          if flutter pub get; then
            echo "Dependencies installed successfully"
            break
          else
            echo "Attempt $i failed"
            if [ $i -eq 3 ]; then
              echo "All attempts failed"
              exit 1
            fi
            echo "Cleaning and retrying..."
            flutter clean
            sleep 5
          fi
        done
        
    - name: Generate app icons
      run: flutter pub run flutter_launcher_icons:main
      continue-on-error: true
      
    - name: Build APK with retry
      run: |
        for i in {1..3}; do
          echo "Attempt $i: Building APK..."
          if flutter build apk --release \
            --dart-define=flutter.inspector.structuredErrors=false \
            --shrink \
            --split-debug-info=build/app/outputs/symbols \
            --obfuscate; then
            echo "APK built successfully"
            break
          else
            echo "Build attempt $i failed"
            if [ $i -eq 3 ]; then
              echo "All build attempts failed"
              exit 1
            fi
            echo "Cleaning and retrying..."
            flutter clean
            flutter pub get
            sleep 10
          fi
        done
      env:
        GRADLE_OPTS: -Xmx4g -XX:+UseG1GC -XX:MaxMetaspaceSize=1g
        _JAVA_OPTIONS: -Xmx4g -XX:+UseG1GC -XX:MaxMetaspaceSize=1g
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: speed-drawer-apk
        path: build/app/outputs/flutter-apk/app-release.apk
        retention-days: 30
        
    - name: Upload symbols
      uses: actions/upload-artifact@v4
      with:
        name: debug-symbols
        path: build/app/outputs/symbols/
        retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download APK
      uses: actions/download-artifact@v4
      with:
        name: speed-drawer-apk
        path: ./
        
    - name: Get tag name
      id: tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        release_name: Speed Drawer ${{ steps.tag.outputs.tag }}
        body: |
          ## Speed Drawer ${{ steps.tag.outputs.tag }}
          
          High-performance custom app drawer focused on speed and productivity.
          
          ### Features
          - ⚡ Instant search with keyboard auto-focus
          - 🔍 Fuzzy search with partial matching
          - ❤️ Favorite apps management
          - 🎨 Customizable themes and icon sizes
          - 📱 Optimized for performance
          - 🏠 Can replace default launcher
          
          ### Installation
          1. Download the APK file below
          2. Enable "Install from unknown sources" in Android settings
          3. Install the APK
          4. Set as default launcher (optional)
          
          ### Requirements
          - Android 6.0 (API level 23) or higher
          
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./app-release.apk
        asset_name: speed-drawer-${{ steps.tag.outputs.tag }}.apk
        asset_content_type: application/vnd.android.package-archive 